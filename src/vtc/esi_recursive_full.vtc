varnishtest "Test resp_top.* in an ESI context"

server s1 {
	rxreq
	txresp \
	-hdr "Last-Modified: Thu, 02 Nov 2017 18:38:02 GMT" \
	-body {
		<html>
		Before include
		<esi:include src="/a"/>
		<esi:include src="/b"/>
		After include
		</html>
	}

	rxreq
	expect req.url == "/a1"
	txresp \
	-hdr "Last-Modified: Fri, 03 Nov 2017 18:38:03 GMT" \
	-body {
		Included file
		<esi:include src="/c"/>
	}

	rxreq
	expect req.url == "/c2"
	txresp \
	-hdr "Last-Modified: Sat, 04 Nov 2017 18:38:04 GMT" \
	-body { c}

	rxreq
	expect req.url == "/b1"
	txresp \
	-hdr "Last-Modified: Sun, 05 Nov 2017 18:38:05 GMT" \
	-body { b}

	rxreq
	expect req.url == "/noinclude"
	txresp \
	-hdr "Last-Modified: Fri, 03 Nov 2017 18:38:04 GMT" \
	-body {<html></html>}
} -start

varnish v1 -arg "-p feature=+esi_disable_xml_check" -vcl+backend {} -start

varnish v1 -vcl+backend {
	import esiextra;
	import std;

	backend recursive {
	    .host = "${v1_addr}";
	    .port = "${v1_port}";
	}

	sub vcl_init {
	    new esilm = esiextra.lm();
	}
	sub vcl_recv {
	    if (req.restarts == 0) {
		unset req.http.X-Do-Recurse;
	    }
	    if (req.esi_level > 0) {
		set req.url = req.url + req.esi_level;
		set req.http.X-TE = "trailers";
		return (hash);
	    }

	    if (req.http.X-Do-Recurse) {
		set req.backend_hint = recursive;
		set req.esi = false;
	    }
	    if (req.http.X-Recursive) {
		set req.hash_ignore_busy = true;
	    }
	    if (req.http.TE == "trailers" || req.http.TEFAIL) {
		# We vary on X-TE to differenciate pre-rendered ESI
		# output with trailers
		set req.http.X-TE = "trailers";
	    } else {
		unset req.http.X-TE;
	    }
	}
	sub vcl_miss {
	    if (req.esi_level == 0 &&
	      ! req.http.TE &&
	      ! req.http.X-Do-Recurse &&
	      ! req.http.X-Recursive) {
		set req.http.X-Do-Recurse = "1";
		return(restart);
	    }
	}
	sub deliver_esi {
	    if (resp_top.http.X-ESI) {
		set resp_top.http.X-ESI = resp_top.http.X-ESI + ":" + req.url;
	    } else {
		set resp_top.http.X-ESI = req.url;
	    }
	    # updating for level > 1 would just be a waste, only the
	    # last update wins anyway
	    if (req.esi_level == 1) {
		if (esilm.inspect(std.time(resp.http.Last-Modified,
		  now - 10s))) {
		    set resp_top.http.Last-Modified = esilm.get();
		}
	    } else {
		esilm.update(std.time(resp.http.Last-Modified, now - 10s));
	    }
	    return (deliver);
	}
	sub vcl_deliver {
	    if (req.esi_level > 0) {
		call deliver_esi;
	    }
	    esilm.update(std.time(resp.http.Last-Modified, now - 10s));
	    if (req.http.TE == "trailers") {
		set resp.http.Trailer = "X-ESI, Last-Modified";
		set resp.http.X-ESI = req.url;
	    }
	    unset resp.http.Vary;
	    if (resp.http.hits) {
		set resp.http.hits = resp.http.hits + "," + obj.hits;
	    } else {
		set resp.http.hits = obj.hits;
	    }
	}
	sub vcl_backend_fetch {
	    if (bereq.http.X-Do-Recurse) {
		set bereq.http.X-Recursive = "1";
		# TE does not get copied to the backend side, but X-TE
		# (varied upon) does
		set bereq.http.TE = "trailers";
	    }
	}
	sub vcl_backend_response {
	    if (bereq.http.X-Do-Recurse) {
		# The recursively fetched Variant has all the headers
		unset bereq.http.X-TE;
		unset beresp.http.ETag;
		esiextra.bodyhash(beresp.http.ETag);
		if (beresp.http.Trailer) {
		    set beresp.http.Trailer = beresp.http.Trailer +
		      ", ETag";
		} else {
		    set beresp.http.Trailer = "ETag";
		}
	    }
	    set beresp.do_esi = true;
	    set beresp.http.Vary = "X-TE";
	}
}

logexpect l1 -v v1 -g raw {
# TEFAIL
#	expect * * VCL_Error {^resp_top.http.X-ESI not writable unless sending Trailers$}
} -start

client c1 {
	txreq -hdr "TE: trailers"
	rxresp
	expect resp.status == 200
	expect resp.bodylen == 85
	expect resp.http.Trailer == "X-ESI, Last-Modified"
	expect resp.http.X-ESI == "/:/a1:/c2:/b1"
	expect resp.http.Last-Modified == "Sun, 05 Nov 2017 18:38:05 GMT"
	expect resp.http.hits == "0"

	txreq
	rxresp
	expect resp.status == 200
	expect resp.bodylen == 85
	expect resp.http.Trailer == <undef>
	expect resp.http.X-ESI == "/:/a1:/c2:/b1"
	expect resp.http.Last-Modified == "Sun, 05 Nov 2017 18:38:05 GMT"
	expect resp.http.ETag == {"8fd5e543966b9d8c767b0eab658adcccddfe73a8f5bf3815dead2da979339024"}
	expect resp.http.hits == "1,0"

	# this fails at esi level 1 - body contains "503 VCL failed"
	# pretending to support TE, but don't
	txreq -hdr "TEFAIL: 1"
	rxresp
	expect resp.status == 200
	expect resp.http.X-ESI == <undef>
	expect resp.bodylen == 562

	# hit the prepared object again
	txreq
	rxresp
	expect resp.status == 200
	expect resp.bodylen == 85
	expect resp.http.Trailer == <undef>
	expect resp.http.X-ESI == "/:/a1:/c2:/b1"
	expect resp.http.Last-Modified == "Sun, 05 Nov 2017 18:38:05 GMT"
	expect resp.http.ETag == {"8fd5e543966b9d8c767b0eab658adcccddfe73a8f5bf3815dead2da979339024"}
	expect resp.http.hits == "1,1"

	# no esi include
	txreq -url "/noinclude"
	rxresp
	expect resp.status == 200
	expect resp.bodylen == 13
	expect resp.http.Trailer == <undef>
	expect resp.http.X-ESI == "/noinclude"
	expect resp.http.Last-Modified == "Fri, 03 Nov 2017 18:38:04 GMT"
	expect resp.http.ETag == {"b633a587c652d02386c4f16f8c6f6aab7352d97f16367c3c40576214372dd628"}
	expect resp.http.hits == "0,0"
} -run
varnish v1 -expect esi_errors == 0
logexpect l1 -wait
